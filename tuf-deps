#!/usr/bin/env bash
#
# TUF - track used files by LD_PRELOADING wrappers to
#           standard file access functions (open,exec)

## 
## tuf-deps - analyze what packages your toolchain depends
##
## usage:
##    tuf-deps [options] [TUF-OUTPUT-FILES]  - analyze previously collected trackings
##    tuf-deps [options] --command 'COMMAND' - analyze particular COMMAND
##
## options:
##    -x  PATTERN
##    --exclude PATTERN   -- exclude files matching PATTERN
##
##    --output_mode MODE  -- select output mode
##
##    -c COMMAND
##    --command COMMAND   -- execute COMMAND and analyze deps of 
##                           this command
##
## output modes
##   file_list (default): outputs space separate tuple: file packager_type package root
##
##   package_list: files agreegated on "packager_type:package" string
##
## example:
##   $ tuf -o mytuf.txt make
##   $ tuf-deps mytuf.txt
##     /usr/include/unistd.h rpm glibc-headers-2.5-58 /
##     /usr/include/bits/typesizes.h rpm glibc-headers-2.5-58 /
##     /bin/rm rpm coreutils-5.97-23.el5_4.2 /
##     /bin/bash rpm bash-3.2-24.el5 /
##     (...)
##
##   $ tuf-deps --output-mode package_list mytuf.txt
##     (...)
##     rpm:bash-3.2-24.el5 /bin/bash
##     rpm:coreutils-5.97-23.el5_4.2 (...) /bin/rm (...)
##     rpm:glibc-headers-2.5-58 (...) /usr/include/unistd.h /usr/include/bits/typesizes.h (...)
##     (...)


readonly PNAME=tuf-deps
readonly tuf_bindir="$(dirname $BASH_SOURCE)"

show_help()
{
    cat $BASH_SOURCE | egrep '^##( |$)' | cut -c3-
}

log_info()
{
    echo "$PNAME: $*" >&2
}
add_prefix()
{
    local prefix="$1"
    awk -v prefix="$prefix" '{ printf("%s%s\n",prefix,$0);}'
}
abspath() (
    local target="$1"

    if [ -d "$target" ] ; then
        cd $target
        pwd
    else
        local name="$(basename "$target")"
        local dir="$(dirname "$target")"
        if [ -d "${dir}" ] ; then
            cd "${dir}"
            echo "$(pwd)/${name}"
        else
            echo "abspath: parent dir: ${dir} doesn't exist"
            return 1
        fi
    fi
)

eval `bashfoo --eval-out`

bashfoo_require path
bashfoo_require temp

while [ -n "$1" ] ; do
    if   [ "$1" = -h -o "$1" = --help ] ; then
        show_help
        exit 0
    elif [ "$1" = -O -o "$1" = --output-mode ] ; then
        [ -z "$2" ] && { echo "$0: $1 option needs argument: file" >&2 ; exit 1; }
        output_mode="$2"
        shift
        shift
    elif [ "$1" = -x -o "$1" = --exclude ] ; then
        [ -z "$2" ] && { echo "$0: $1 option needs argument: file" >&2 ; exit 1; }
        excludes="$excludes $2"
        shift
        shift
    elif [ "$1" = -c -o "$1" = --command ] ; then
        [ -z "$2" ] && { echo "$0: $1 option needs argument: file" >&2 ; exit 1; }
        command=$2
        shift
        shift
    elif [ "$1" = -- ] ; then
        shift
        break
    else
        break
    fi
done

readonly sorted_input_tmp="$(bashfoo.mktemp)"
readonly created_files_tmp="$(bashfoo.mktemp)"
readonly files_to_analyze="$(bashfoo.mktemp)"
readonly portz_find_pkg_out="$(bashfoo.mktemp)"

filter_out_excludes() {
    local excludes_re=""
    for ex in $excludes ; do
        log_info "exluding ${ex}"
        if [ -z "$excludes_re" ] ; then
            excludes_re="(${ex})"
        else
            excludes_re="${exludes_re}|(${ex})"
        fi
    done
    if [ -n "${excludes_re}" ] ; then
        excludes_re="|($excludes_re)"
    fi
    egrep -v "(^creat)$excludes_re"
}

if [ -n "$command" ] ; then
    my_tuf_file="$(bashfoo.mktemp)"
    input_files="$my_tuf_file"
    ${tuf_bindir}/tuf -o "$my_tuf_file" $command
else
    input_files="$@"
fi

cat $input_files |
    filter_out_excludes |
    awk '{print $2}' |
    sort -u > "$files_to_analyze"


use_dpkg_db=0
use_rpm_db=1
use_portz_db=1
use_osx_pkg_db=0

not_known_rpm="$(bashfoo.mktemp)"
osx_pkg_out="$(bashfoo.mktemp)"

some_files_not_known=0

classify_files() {
    # input: $files_to_analyze
    # output:
    #   tuple(file, packager_type, package, root)
    # example:
    #   /usr/include/asm/types.h rpm kernel-headers-2.6.18-238.el5 /
    #
    while read file ; do
        known=0
        if [ -d "$file" ]; then
            # we ignore folders
            continue
        elif [ ! -f "$file" ] ; then
            # not a regular file ... ignore
            continue
        fi
        file="$(abspath $file)"

        #
        if [ $known = 0 -a "$use_dpkg_db" = 1 ] ; then
            true
        fi
        if [ $known = 0 -a "$use_rpm_db" = 1 ] ; then
            # TBD, rpm may return multiple lines for one file!
            #   $ rpm -qf /usr/include/ncurses/curses.h
            #   ncurses-devel-5.5-24.20060715
            #   ncurses-devel-5.5-24.20060715
            # for now, we will fix it by choosing first one :)
            rpm_output="$(rpm -qf $file | head -n1)"
            if echo "$rpm_output" | grep -q "is not owned by any package" ; then
                echo "$file" > "$not_known_rpm"
            else
                known=1
                echo "$file rpm $rpm_output /"
            fi
        fi
        if [ $known = 0 -a "$use_osx_pkg_db" = 1 ] ; then
            pkgutil --file-info "$file" > "$osx_pkg_out"
            root="$(grep volume: "$osx_pkg_out" | cut -d: -f2-)"
            pkgid="$(grep pkgid: "$osx_pkg_out" | cut -d: -f2-)"
            pkgversion="$(grep pkg-version: "$osx_pkg_out" | cut -d: -f2-)"

            if [ -n "$pkgid" -a -n "$pkgversion" ] ; then
                echo "$file pkg $pkgid-$pkgversion $root"
                known=1
            elif [ -n "$pkgid" ] ; then
                echo "$file pkg $pkgid $root"
                known=1
            fi
        fi
        if [ $known = 0 -a "$use_portz_db" = 1 ] ; then
            /home/zagorzbi/projects/portz/portz_find_pkg $file > "$portz_find_pkg_out"
            read file2 name version root < "$portz_find_pkg_out"
            if [ "$name" != - -a "$version" != - ] ; then
                echo "$file portz $name-$version $root"
                known=1
            elif [ "$name" != - ] ; then
                echo "$file portz $name $root"
                known=1
            fi
        fi
        if [ $known = 0 ] ; then
            echo "$file unknown unknown /"
            some_files_not_known=1
        fi
    #    exit
    done < $files_to_analyze
}
agreegate_on_package()
{
    awk '
        BEGIN {
        }
        // {
            file=$1
            packager_type=$2
            package=$3
            root=$4

            type=sprintf("%s:%s", packager_type, package);
            file_list = package_files[type];
            if( file_list ) {
                file_list=sprintf("%s %s", file_list, file);
            } else {
                file_list=file;
            }
            package_files[type] = file_list;
        }
        END {
            for(pkg_type in package_files) {
                printf("%s %s\n", pkg_type, package_files[pkg_type] );
            }
        }
    '
}

output_mode="${output_mode-file_list}"

if   [ "$output_mode" = file_list ] ; then
    classify_files
elif [ "$output_mode" = package_list ] ; then
    classify_files | agreegate_on_package
else
    log_info "error: unknown output_mode($output_mode)"
    exit 1
fi

exit $some_files_not_known
