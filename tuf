#!/usr/bin/env bash
#
# TUF - track used files by LD_PRELOADING wrappers to
#           standard file access functions (open,exec)

##
## tuf - track files are used by your command/scripts/programs
##
##    tuf COMMAND - output goes to ./.tuf-<pid>.txt
##    tuf -o file COMMAND
##
## example:
##
##   $ ./tuf 'cat /etc/hosts | grep local'
##   tuf: note, logging file access to /home/zagorzbi/projects/priv/tuf/.tuf-13507.txt
##   $ cat /home/zagorzbi/projects/priv/tuf/.tuf-13507.txt
##   open /dev/tty
##   exec /bin/cat
##   exec /bin/grep
##   open /etc/hosts


show_help()
{
    cat $BASH_SOURCE | egrep '^##( |$)' | cut -c3-
}

abspath() (
    local target="$1"

    if [ -d "$target" ] ; then
        cd $target
        pwd
    else
        local name="$(basename "$target")"
        cd "$(dirname "$target")"
        echo "$(pwd)/${name}"
    fi
)

readonly tuf_bindir="$(abspath $(dirname $BASH_SOURCE))"

while [ -n "$1" ] ; do
    if   [ "$1" = -h -o "$1" = --help ] ; then
        show_help
        exit 0
    elif [ "$1" = -o -o "$1" = --output ] ; then
        [ -z "$2" ] && { echo "$0: $1 option needs argument: file" >&2 ; exit 1; }
        TUF_FILE=$2
        shift
        shift
    elif [ "$1" = -- ] ; then
        shift
        break
    else
        break
    fi
done

if [ -z "$1" ] ; then
    echo "$0: no command given" >&2 
    show_help
    exit 1
fi

if [ -z "$TUF_FILE" ] ; then
    TUF_FILE=".tuf-$$.txt" 
    echo "tuf: note, logging file access to $TUF_FILE" >&2
fi
TUF_FILE="$(abspath ${TUF_FILE})"
export TUF_FILE

readonly uname=$(uname)
if [ "$uname" = Darwin ]; then
    tuf_libname=libtuf.dylib
else
    tuf_libname=libtuf.so
fi

tuf_libdir="${tuf_bindir}/../lib/tuf"
if [ ! -f "$tuf_libdir/$tuf_libname" ] ; then
    if [ -f "$tuf_bindir/$tuf_libname" ] ; then
        tuf_libdir="$tuf_bindir"
    else
        echo "$0: error unsable to find ${tuf_libname}, exiting" >&2
        exit 2
    fi
fi

if [ "$uname" = Darwin ]; then
    export DYLD_INSERT_LIBRARIES="${tuf_libdir}/libtuf.dylib"
    export DYLD_FORCE_FLAT_NAMESPACE=1
else
    export LD_PRELOAD="${tuf_libdir}/libtuf.so"
fi
# note:
# previously it was:
#  exec "$@"
# but it always lacked "first executed program, i.e"
#   tuf make - was missing /usr/bin/make
#   tuf gcc ... - was missing /usr/bin/gcc
# the one below ensures that new shell with
#  LD_PRELOAD is visible
#  other hack would be to "explicitly" list
#  which '$1' as first file in output ... not
#  ... now, let's do it this way
exec $SHELL -c "exec $*"

